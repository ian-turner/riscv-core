
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module top (

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	/* 24 bit clock divider, converts 50MHz clock signal to 2.98Hz */
	logic [23:0] clkdiv;
	logic ledclk;
	assign ledclk = clkdiv[23];

	/* driver for LEDs */
	logic [25:0] leds;
	assign LEDR = leds[25:8];
	assign LEDG = leds[7:0];

	/* LED state register, 0 means going left, 1 means going right */
	logic ledstate;


//=======================================================
//  Behavioral coding
//=======================================================


	initial begin
		clkdiv = 26'h0;
		/* start at the far right, LEDG0 */
		leds = 26'b1;
		/* start out going to the left */
		ledstate = 1'b0;
	end

	always @(posedge CLOCK_50) begin
		/* drive the clock divider, every 2^26 cycles of CLOCK_50, the
		* top bit will roll over and give us a clock edge for clkdiv
		* */
		clkdiv <= clkdiv + 1;
	end

	// connecting displays to cpu output
	logic [31:0] cpu_io2_out;
	logic [31:0] none;

	// connecting cpu
	cpu mycpu(
		.clk(CLOCK_50),
		.rst_n(KEY[0]),
		.io0_in({14'b0, SW}), // connecting switches
		.io1_in({18'b0, KEY}), // buttons
		.io2_out(cpu_io2_out), // connecting hex displays
		.io3_out(none) // leds
	);

	// connecting hex displays
	hexdriver hex0 (.val(cpu_io2_out[31:28]), .HEX(HEX0));
	hexdriver hex1 (.val(cpu_io2_out[27:24]), .HEX(HEX1));
	hexdriver hex2 (.val(cpu_io2_out[23:20]), .HEX(HEX2));
	hexdriver hex3 (.val(cpu_io2_out[19:16]), .HEX(HEX3));
	hexdriver hex4 (.val(cpu_io2_out[15:12]), .HEX(HEX4));
	hexdriver hex5 (.val(cpu_io2_out[11:8]), .HEX(HEX5));
	hexdriver hex6 (.val(cpu_io2_out[7:4]), .HEX(HEX6));
	hexdriver hex7 (.val(cpu_io2_out[3:0]), .HEX(HEX7));

endmodule
